# -*- coding: utf-8 -*-
"""Copy of data_visualization_lab_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11xjt3hiy8iOZJF8oBIz5o-q93OM5uNTL

## Data Visualization Laboratory Exercises
This Jupyter Notebook contains **15 exercises** on data visualization using Python libraries: **Matplotlib, Seaborn, and Plotly**.

Each exercise is designed to test your ability to create and interpret visualizations.
- Some exercises provide sample data but no code.
- Some exercises require you to figure out the correct visualization on your own.
- Some exercises only give partial instructions.

**Libraries Used:**
- `matplotlib`
- `seaborn`
- `plotly`
- `pandas`
- `numpy`

Make sure you have installed all required libraries before starting:

```python
!pip install matplotlib seaborn plotly pandas numpy
```

## 1. Line Chart
Plot a line chart showing the trend of monthly revenue for a business over a year.
"""

# Sample Data
import pandas as pd

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
revenue = [12000, 15000, 18000, 17000, 19000, 22000, 25000, 24000, 23000, 26000, 27000, 30000]

df = pd.DataFrame({'Month': months, 'Revenue': revenue})
df.head()

# Now, create a line chart using Matplotlib.

import matplotlib.pyplot as plt

plt.plot(df['Month'], df['Revenue'], linestyle='-')
plt.xlabel('Month')
plt.ylabel('Revenue')
plt.title('Monthly Revenue Over a Year')
plt.grid(True)

"""## 2. Bar Chart
Create a bar chart that compares the number of units sold for different product categories.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = {'Category': ['Electronics', 'Clothing', 'Furniture', 'Books', 'Toys'],
        'Units Sold': [150, 200, 80, 300, 120]}

df = pd.DataFrame(data)

plt.bar(df['Category'], df['Units Sold'])
plt.xlabel('Product Category')
plt.ylabel('Number of Units Sold')
plt.title('Units Sold by Product Category')
plt.xticks(rotation=45, ha='right')
plt.show()

"""## 3. Histogram
Generate a histogram to visualize the distribution of customer ages in a store.
"""

# Sample Data
import numpy as np

np.random.seed(42)
ages = np.random.randint(18, 65, 200)

# Use Matplotlib or Seaborn to create the histogram.
import matplotlib.pyplot as plt

plt.hist(ages, bins=30)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Customer Age Distribution')
plt.show()

"""## 4. Scatter Plot
Plot a scatter plot to analyze the correlation between marketing spend and sales revenue.
"""

import matplotlib.pyplot as plt


marketing_spend = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]
sales_revenue = [5000, 7000, 8000, 8500, 11000, 13000, 15000, 16000, 18000, 21000]

plt.scatter(marketing_spend, sales_revenue)
plt.legend("V") #values
plt.title('Marketing Spend vs Sales Revenue')
plt.show()

"""## 5. Subplots
Create a figure with two subplots: (1) a line chart showing website visitors over months, and (2) a bar chart showing the number of purchases.
"""

# Sample Data
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
visitors = [5000, 7000, 8000, 7500, 8200, 9000]
purchases = [200, 300, 450, 400, 480, 550]

# Create subplots using Matplotlib.
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

# Line chart for website visitors
axes[0].plot(months, visitors, color='blue', linestyle='-', linewidth=2)
axes[0].set_title("Website Visitors Over Months")
axes[0].set_xlabel("Months")
axes[0].set_ylabel("Visitors")

# Bar chart for purchases
axes[1].bar(months, purchases, color='green', alpha=0.7)
axes[1].set_title("Number of Purchases")
axes[1].set_xlabel("Months")
axes[1].set_ylabel("Purchases")

plt.tight_layout()
plt.show()

"""## 6. Heatmap
Create a heatmap using Seaborn to visualize correlations between different variables in a dataset.
"""

import seaborn as sns

np.random.seed(42)
data = np.random.rand(10, 10)

plt.figure(figsize=(8, 6))
df = pd.DataFrame(data, columns=['A', 'B', 'C', 'D', 'E','F','G','H','I','J'])

corr = df.corr() #correlation

sns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5, linecolor="black")
plt.title("Correlation Heatmap")
plt.show()

"""## 7. Box Plot
Generate a box plot to compare the salary distributions of employees in different departments.
"""

# Sample Data
import pandas as pd
import seaborn as sns

data = {'Department': ['HR', 'IT', 'Sales', 'Marketing', 'HR', 'IT', 'Sales', 'Marketing'],
        'Salary': [50000, 70000, 45000, 60000, 52000, 71000, 47000, 62000]}
df = pd.DataFrame(data)

# Use Seaborn to create the box plot.

sns.boxplot(x='Department', y='Salary', data=df)
plt.title('Salary Distribution by Department')

"""## 8. Pie Chart
Create a pie chart to show the proportion of different customer types in a business.
"""

import matplotlib.pyplot as plt

# Sample data for customer types
customer_types = ['Regular', 'VIP', 'New', 'Wholesale']
customer_counts = [300, 200, 100, 50]

plt.pie(customer_counts, labels=customer_types, autopct='%1.1f%%', startangle=90)
plt.title('Customer Type Proportions')

plt.show()

"""## 9. Interactive Bar Chart (Plotly)
Use Plotly to create an interactive bar chart for the number of sales per region.
"""

# Sample Data
import pandas as pd

regions = ['North', 'South', 'East', 'West']
sales = [150, 200, 180, 220]

df = pd.DataFrame({'Region': regions, 'Sales': sales})

# Use Plotly to create an interactive bar chart.

import plotly.express as px

fig = px.bar(df, x='Region', y='Sales', title='Sales per Region')
fig.show()

"""## 10. Time-Series Data
Generate a time-series line plot showing daily temperature changes over a month.
"""

days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]
temperatures = np.random.randint(15, 28, size=30)

plt.plot(days, temperatures, linestyle='-')
plt.xlabel('Day')
plt.ylabel('Temperature (Â°C)')
plt.title('Daily Temperature Changes Over a Month')
plt.grid(True)
plt.show()

"""## 11. Choropleth Map (Geographical Visualization)
Create a choropleth map showing average income levels per country.
"""

# Sample Data
import pandas as pd

data = {'Country': ['USA', 'Canada', 'Germany', 'France', 'India'],
        'Income': [55000, 48000, 50000, 47000, 15000]}
df = pd.DataFrame(data)

# Use Plotly to create a choropleth map.
import plotly.express as px

fig = px.choropleth(df, locations='Country', locationmode='country names', color='Income',
                    color_continuous_scale='Blues', title='Average Income Levels per Country')
fig.show()

"""## 12. Violin Plot
Plot a violin plot to analyze the distribution of student test scores across different schools.
"""

import seaborn as sns
import matplotlib.pyplot as plt

schools = ['School A', 'School A', 'School A', 'School B', 'School B', 'School B', 'School C', 'School C', 'School C']
test_scores = [85, 90, 78, 88, 92, 80, 95, 96, 94]

plt.figure(figsize=(8, 6))
sns.violinplot(x=schools, y=test_scores)

plt.title('Distribution of Student Test Scores Across Different Schools')
plt.show()

"""## 13. Create a bar chart using Matplotlib to show total sales for different product categories."""

import pandas as pd
import matplotlib.pyplot as plt

# Sample Data
data = {
    'Category': ['Electronics', 'Clothing', 'Home & Kitchen', 'Beauty', 'Sports'],
    'Sales': [50000, 35000, 42000, 28000, 32000]
}

# Create DataFrame
df = pd.DataFrame(data)

# Bar Chart: Total Sales by Category
plt.figure(figsize=(8, 5))
plt.bar(df['Category'], df['Sales'], color='skyblue')

# Add labels and title (Complete this part)
plt.xlabel("Category")  # <-- Fill in the missing label
plt.ylabel("Sales")  # <-- Fill in the missing label
plt.title("Total Sales")  # <-- Fill in the missing title

# Show plot
plt.show()

"""## 14. Dashboard-like Figure
Combine multiple visualizations (bar chart, scatter plot, pie chart) into a single figure using subplots.
"""

# Sample Data
import pandas as pd

data = {'Category': ['A', 'B', 'C', 'D'], 'Values': [10, 20, 30, 40]}
df = pd.DataFrame(data)

# Use Matplotlib to create multiple subplots in a dashboard-like figure.
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec


fig = plt.figure(figsize=(12, 8))

gs = gridspec.GridSpec(2, 2, figure=fig)

# Bar chart
ax1 = fig.add_subplot(gs[0, 0])
ax1.bar(df['Category'], df['Values'], color='lightgreen')
ax1.set_title('Bar Chart')
ax1.set_xlabel('Category')
ax1.set_ylabel('Values')

# Scatter plot
ax2 = fig.add_subplot(gs[0, 1])
ax2.scatter(df['Category'], df['Values'], color='lightcoral')
ax2.set_title('Scatter Plot')
ax2.set_xlabel('Category')
ax2.set_ylabel('Values')

# Pie chart
ax3 = fig.add_subplot(gs[1, :])
ax3.pie(df['Values'], labels=df['Category'], autopct='%1.1f%%', colors=['lightcoral', 'lightgreen', 'lightblue', 'lightpink'])
ax3.set_title('Pie Chart')


plt.tight_layout()
plt.show()

"""## 15. Pandas DataFrame Exercise
Example: Create a DataFrame using the zip() function.
"""

import pandas as pd

# List1: Names of students
Students = ['Alice', 'Bob', 'Charlie', 'David']

# List2: Corresponding ages
Ages = [21, 23, 22, 20]

# Use zip() to combine the two lists into a list of tuples
student_data = list(zip(Students, Ages))  # <-- Complete this line using zip()

# Convert the list of tuples into a Pandas DataFrame
df = pd.DataFrame(student_data, columns=['Student', 'Age'])

# Print the DataFrame
print(df)  # <-- Complete this line to print the DataFrame

"""## 16. Access and Filter Data from a DataFrame
You have been given a dataset containing information about employees, including their Name, Age, Gender, and Salary. Using Pandas, perform the following tasks:

1. Create a DataFrame using the provided dictionary structure.
2. Display the entire DataFrame.
3. Access the "Salary" column and print it.
4. Select the third row (index 2) and print it.
5. Retrieve only the "Name" and "Salary" columns for the first three rows.
6. Filter and print employees who earn more than $50,000.
"""

import pandas as pd

# Provided Data
data = {
    'Name': ['John', 'Alice', 'Bob', 'Eve', 'Charlie'],
    'Age': [25, 30, 22, 35, 28],
    'Gender': ['Male', 'Female', 'Male', 'Female', 'Male'],
    'Salary': [50000, 55000, 40000, 70000, 48000]
}

# 1. Create a DataFrame from the dictionary
df = pd.DataFrame(data, columns= ['Name','Age','Gender','Salary'])  # <-- Complete this line

# 2. Display the entire DataFrame
print(df)  # <-- Complete this line

# 3. Access and print the "Salary" column
salary_column = df['Salary']
print(salary_column)

# 4. Select and print the third row (index 2)
third_row = df.iloc[2]
print(third_row)

# 5. Retrieve and print only the "Name" and "Salary" columns for the first three rows
subset = df[['Name', 'Salary']].head(3)
print(subset)

# 6. Filter and print employees who earn more than $50,000
filtered_data =  df[df['Salary'] > 50000]
print(filtered_data)